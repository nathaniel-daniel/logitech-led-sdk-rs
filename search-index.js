var searchIndex = JSON.parse('{\
"logitech_led_sdk":{"doc":"","t":"NNNNNNNSNNNNNNNDNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSNNNNNNSNNHNNNNDNNNNNNDNNNNNNNLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLL","n":["A","APOSTROPHE","APPLICATION_SELECT","ARROW_DOWN","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","All","B","BACKSLASH","BACKSPACE","C","CAPS_LOCK","CLOSE_BRACKET","COMMA","ColorPercent","D","DeviceType","E","EIGHT","END","ENTER","EQUALS","ESC","F","F1","F10","F11","F12","F2","F3","F4","F5","F6","F7","F8","F9","FIVE","FORWARD_SLASH","FOUR","G","G_1","G_2","G_3","G_4","G_5","G_6","G_7","G_8","G_9","G_BADGE","G_LOGO","H","HOME","Headset","I","INSERT","J","K","KEYBOARD_DELETE","KeyName","Keyboard","L","LEFT_ALT","LEFT_CONTROL","LEFT_SHIFT","LEFT_WINDOWS","M","MINUS","Monochrome","Mouse","Mousemat","N","NINE","NUM_ASTERISK","NUM_EIGHT","NUM_ENTER","NUM_FIVE","NUM_FOUR","NUM_LOCK","NUM_MINUS","NUM_NINE","NUM_ONE","NUM_PERIOD","NUM_PLUS","NUM_SEVEN","NUM_SIX","NUM_SLASH","NUM_THREE","NUM_TWO","NUM_ZERO","O","ONE","OPEN_BRACKET","P","PAGE_DOWN","PAGE_UP","PAUSE_BREAK","PERIOD","PRINT_SCREEN","PerKeyRgb","Q","R","RIGHT_ALT","RIGHT_CONTROL","RIGHT_SHIFT","RIGHT_WINDOWS","Rgb","S","SCROLL_LOCK","SDK_LOCK","SEMICOLON","SEVEN","SIX","SPACE","Sdk","Speaker","T","TAB","THREE","TILDE","TWO","TargetDevice","U","V","W","X","Y","Z","ZERO","all","b","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","complement","contains","difference","drop","empty","eq","eq","eq","eq","extend","flash_lighting","flash_single_key","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","g","get_version","hash","hash","hash","hash","insert","intersection","intersects","into","into","into","into","into","into_iter","is_all","is_empty","iter","iter_names","new","new_percent","new_rgb","new_with_name","not","pulse_lighting","pulse_single_key","r","remove","restore_lighting_for_key","save_lighting_for_key","set","set_lighting","set_lighting_for_key_with_hid_code","set_lighting_for_key_with_name","set_lighting_for_key_with_scan_code","set_lighting_for_target_zone","set_target","stop_effects","stop_effects_on_key","sub","sub_assign","symmetric_difference","sys","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union"],"q":[[0,"logitech_led_sdk"],[253,"core::iter::traits::collect"],[254,"core::time"],[255,"core::option"],[256,"core::fmt"],[257,"core::fmt"],[258,"core::hash"],[259,"bitflags::iter"],[260,"bitflags::iter"]],"d":["","","","","","","","","","","","","","","","A percent-based RGB Color.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The lock that syncs accesses to the SDK.","","","","","Entry to Api.","","","","","","","Select target devices by color types.","","","","","","","","Get a flags value with all known bits set.","Blue","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","","Get a flags value with all bits unset.","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","Save the current lighting, play the effect, and restore …","Start a flashing effect on the given key.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Green","Returns the sdk version.","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Create a new sdk instance with no name.","Creates a new color from raw percentage values, NOT RGB …","Creates a new color from RGB values, NOT percentage values.","Create a new sdk instance with a name, where the name is …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Save the current lighting, pulse the lighting, then …","Start a pulsing effect on the given key.","Red","The intersection of a source flags value with the …","Restores the current lighting config for the given key.","Saves the current lighting config for the given key.","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Sets the lighting.","Sets the lighting for a keyboard key by HID code.","Set the lighting for a keyboard key by key name.","Sets the lighting for a keyboard key by scan code.","Sets the lighting for a specific device’s target zone.","Selects the target devices.","Stops all current LED effects.","Stops all LED effects on one key.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values."],"i":[5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,0,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,0,6,5,5,5,5,5,5,5,1,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,1,5,5,0,5,5,5,5,0,6,5,5,5,5,5,0,5,5,5,5,5,5,5,1,4,1,1,1,1,1,1,1,1,8,4,1,5,6,8,4,1,5,6,4,1,5,6,4,1,5,6,1,1,1,8,1,4,1,5,6,1,8,8,4,1,1,1,1,1,5,6,8,4,1,5,6,1,1,1,1,1,1,4,8,4,1,5,6,1,1,1,8,4,1,5,6,1,1,1,1,1,8,4,4,8,1,8,8,4,1,8,8,1,8,8,8,8,8,8,8,8,1,1,1,0,4,1,5,6,1,8,4,1,5,6,8,4,1,5,6,8,4,1,5,6,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],0,[[1,1],1],[[1,1],2],[[1,1],1],[[1,1],2],[1,3],[1,3],[[1,1],1],[[1,1],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[1,1],[5,5],[6,6],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[1,1],[[1,1],7],[[1,1],1],[8,2],[[],1],[[4,4],7],[[1,1],7],[[5,5],7],[[6,6],7],[[1,-1],2,9],[[8,4,[11,[10]],10],7],[[8,5,4,[11,[10]],10],7],[[4,12],13],[[1,12],13],[[1,12],13],[[1,12],13],[[1,12],13],[[1,12],13],[[5,12],[[15,[2,14]]]],[[6,12],[[15,[2,14]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[3,[[11,[1]]]],[3,1],[3,1],[3,1],[-1,1,9],[16,[[11,[1]]]],0,[8,[[11,[[2,[3,3,3]]]]]],[[4,-1],2,17],[[1,-1],2,17],[[5,-1],2,17],[[6,-1],2,17],[[1,1],2],[[1,1],1],[[1,1],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1],[1,7],[1,7],[1,[[18,[1]]]],[1,[[19,[1]]]],[[],[[11,[8]]]],[[20,20,20],[[11,[4]]]],[[20,20,20],4],[16,[[11,[8]]]],[1,1],[[8,4,[11,[10]],10],7],[[8,5,4,4,10,7],7],0,[[1,1],2],[[8,5],7],[[8,5],7],[[1,1,7],2],[[8,4],7],[[8,3,4],7],[[8,5,4],7],[[8,3,4],7],[[8,6,3,4],7],[[8,1],7],[8,7],[[8,5],7],[[1,1],1],[[1,1],2],[[1,1],1],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],2],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[1,1],1]],"c":[],"p":[[3,"TargetDevice",0],[15,"tuple"],[15,"u32"],[3,"ColorPercent",0],[4,"KeyName",0],[4,"DeviceType",0],[15,"bool"],[3,"Sdk",0],[8,"IntoIterator",253],[3,"Duration",254],[4,"Option",255],[3,"Formatter",256],[6,"Result",256],[3,"Error",256],[4,"Result",257],[15,"str"],[8,"Hasher",258],[3,"Iter",259],[3,"IterNames",259],[15,"u8"],[3,"TypeId",260]],"b":[[136,"impl-Flags-for-TargetDevice"],[137,"impl-TargetDevice"],[171,"impl-Debug-for-TargetDevice"],[172,"impl-LowerHex-for-TargetDevice"],[173,"impl-Binary-for-TargetDevice"],[174,"impl-UpperHex-for-TargetDevice"],[175,"impl-Octal-for-TargetDevice"],[184,"impl-Flags-for-TargetDevice"],[185,"impl-TargetDevice"]]},\
"logitech_led_sdk_sys":{"doc":"","t":"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRRRRRRRRRRRRFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["A","APOSTROPHE","APPLICATION_SELECT","ARROW_DOWN","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","B","BACKSLASH","BACKSPACE","C","CAPS_LOCK","CLOSE_BRACKET","COMMA","D","E","EIGHT","END","ENTER","EQUALS","ESC","F","F1","F10","F11","F12","F2","F3","F4","F5","F6","F7","F8","F9","FIVE","FORWARD_SLASH","FOUR","G","G_1","G_2","G_3","G_4","G_5","G_6","G_7","G_8","G_9","G_BADGE","G_LOGO","H","HOME","Headset","I","INSERT","J","K","KEYBOARD_DELETE","Keyboard","L","LEFT_ALT","LEFT_CONTROL","LEFT_SHIFT","LEFT_WINDOWS","LOGI_DEVICETYPE_ALL","LOGI_DEVICETYPE_MONOCHROME","LOGI_DEVICETYPE_MONOCHROME_ORD","LOGI_DEVICETYPE_PERKEY_RGB","LOGI_DEVICETYPE_PERKEY_RGB_ORD","LOGI_DEVICETYPE_RGB","LOGI_DEVICETYPE_RGB_ORD","LOGI_LED_BITMAP_BYTES_PER_KEY","LOGI_LED_BITMAP_HEIGHT","LOGI_LED_BITMAP_SIZE","LOGI_LED_BITMAP_WIDTH","LOGI_LED_DURATION_INFINITE","LogiLedExcludeKeysFromBitmap","LogiLedFlashLighting","LogiLedFlashSingleKey","LogiLedGetConfigOptionBool","LogiLedGetConfigOptionColor","LogiLedGetConfigOptionKeyInput","LogiLedGetConfigOptionNumber","LogiLedGetConfigOptionRange","LogiLedGetConfigOptionRect","LogiLedGetConfigOptionSelect","LogiLedGetConfigOptionString","LogiLedGetSdkVersion","LogiLedInit","LogiLedInitWithName","LogiLedPulseLighting","LogiLedPulseSingleKey","LogiLedRestoreLighting","LogiLedRestoreLightingForKey","LogiLedSaveCurrentLighting","LogiLedSaveLightingForKey","LogiLedSetConfigOptionLabel","LogiLedSetLighting","LogiLedSetLightingForKeyWithHidCode","LogiLedSetLightingForKeyWithKeyName","LogiLedSetLightingForKeyWithQuartzCode","LogiLedSetLightingForKeyWithScanCode","LogiLedSetLightingForTargetZone","LogiLedSetLightingFromBitmap","LogiLedSetTargetDevice","LogiLedShutdown","LogiLedStopEffects","LogiLedStopEffectsOnKey","LogiLed_DeviceType","LogiLed_KeyName","M","MINUS","Mouse","Mousemat","N","NINE","NUM_ASTERISK","NUM_EIGHT","NUM_ENTER","NUM_FIVE","NUM_FOUR","NUM_LOCK","NUM_MINUS","NUM_NINE","NUM_ONE","NUM_PERIOD","NUM_PLUS","NUM_SEVEN","NUM_SIX","NUM_SLASH","NUM_THREE","NUM_TWO","NUM_ZERO","O","ONE","OPEN_BRACKET","P","PAGE_DOWN","PAGE_UP","PAUSE_BREAK","PERIOD","PRINT_SCREEN","Q","R","RIGHT_ALT","RIGHT_CONTROL","RIGHT_SHIFT","RIGHT_WINDOWS","S","SCROLL_LOCK","SEMICOLON","SEVEN","SIX","SPACE","Speaker","T","TAB","THREE","TILDE","TWO","U","V","W","X","Y","Z","ZERO","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","hash","hash","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"logitech_led_sdk_sys"],[192,"core::fmt"],[193,"core::fmt"],[194,"core::result"],[195,"core::any"]],"deturns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,1],4],[[2,2],4],[[1,5],6],[[2,5],6],[-1,-1,[]],[-1,-1,[]],[[1,-1],3,7],[[2,-1],3,7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]]],"c":[],"p":[[4,"LogiLed_KeyName",0],[4,"LogiLed_DeviceType",0],[15,"tuple"],[15,"bool"],[3,"Formatter",192],[6,"Result",192],[8,"Hasher",193],[4,"Result",194],[3,"TypeId",195]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
